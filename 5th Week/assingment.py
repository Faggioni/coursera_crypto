import numtools as nt
import math
import numbthy as nb
"""
    2^40 = 1.099.511.627.776
"""

p = 030073546976801874298166903427690031858186486050853753882811946569946433649006084171
g = 11717829880366207009516117596335367088558084999998952205599979459063929499736583746670572176471460312928594829675428279466566527115212748467589894601965568
h = 3239475104050450443565264378728065788649097520952449527834792452971981976143292558073856937958553180532878928001494706097394108577585732452307673444020333
B = int(math.pow(2,20))
#Creating Hash Table
hash_table = []
for i in range(int(math.pow(2,20)) + 1):
    hash_table.append([i,h * nb.inverse_mod(nb.power_mod(g,i,p),p)])
#Searching for the values
for i in range(int(math.pow(2,20)) + 1):
    if(hash_table[i][1] == nb.power_mod(g,B*i,p)):
        print hash_table[i,0]
        print j
        break

prindsads
